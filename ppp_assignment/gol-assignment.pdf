%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<<
/F1 2 0 R /F2 3 0 R
>>
endobj
2 0 obj
<<
/BaseFont /Times-Roman /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font
>>
endobj
3 0 obj
<<
/BaseFont /Times-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font
>>
endobj
4 0 obj
<<
/A <<
/S /URI /Type /Action /URI (http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)
>> /Border [ 0 0 0 ] /Rect [ 85.69291 513.7736 319.5629 525.7736 ] /Subtype /Link /Type /Annot
>>
endobj
5 0 obj
<<
/A <<
/S /URI /Type /Action /URI (http://www.bitstorm.org/gameoflife/)
>> /Border [ 0 0 0 ] /Rect [ 85.69291 495.7736 231.8029 507.7736 ] /Subtype /Link /Type /Annot
>>
endobj
6 0 obj
<<
/Annots [ 4 0 R 5 0 R ] /Contents 29 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 28 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
7 0 obj
<<
/Contents 30 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 28 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
8 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://www.cs.vu.nl/das5/jobs.shtml)
>> /Border [ 0 0 0 ] /Rect [ 85.69291 333.7736 234.0429 345.7736 ] /Subtype /Link /Type /Annot
>>
endobj
9 0 obj
<<
/Annots [ 8 0 R ] /Contents 31 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 28 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
10 0 obj
<<
/A <<
/S /URI /Type /Action /URI (http://www.mpi.org)
>> /Border [ 0 0 0 ] /Rect [ 217.3429 621.0236 296.7929 633.0236 ] /Subtype /Link /Type /Annot
>>
endobj
11 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://www.rookiehpc.com/mpi/docs/mpi_type_create_resized.php)
>> /Border [ 0 0 0 ] /Rect [ 108.6929 453.7736 380.0529 465.7736 ] /Subtype /Link /Type /Annot
>>
endobj
12 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://en.wikipedia.org/wiki/Amdahl%27s_law)
>> /Border [ 0 0 0 ] /Rect [ 108.6929 393.7736 300.9129 405.7736 ] /Subtype /Link /Type /Annot
>>
endobj
13 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://en.wikipedia.org/wiki/Gustafson%27s_law)
>> /Border [ 0 0 0 ] /Rect [ 108.6929 375.7736 309.2429 387.7736 ] /Subtype /Link /Type /Annot
>>
endobj
14 0 obj
<<
/Annots [ 10 0 R 11 0 R 12 0 R 13 0 R ] /Contents 32 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 28 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
15 0 obj
<<
/Contents 33 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 28 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
16 0 obj
<<
/Outlines 18 0 R /PageLabels 34 0 R /PageMode /UseNone /Pages 28 0 R /Type /Catalog
>>
endobj
17 0 obj
<<
/Author () /CreationDate (D:20211215113519-01'00') /Creator (\(unspecified\)) /Keywords () /ModDate (D:20211215113519-01'00') /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title (Conway's Game of Life in MPI) /Trapped /False
>>
endobj
18 0 obj
<<
/Count 9 /First 19 0 R /Last 27 0 R /Type /Outlines
>>
endobj
19 0 obj
<<
/Dest [ 6 0 R /XYZ 62.69291 729.0236 0 ] /Next 20 0 R /Parent 18 0 R /Title (Introduction)
>>
endobj
20 0 obj
<<
/Dest [ 7 0 R /XYZ 62.69291 765.0236 0 ] /Next 21 0 R /Parent 18 0 R /Prev 19 0 R /Title (MPI)
>>
endobj
21 0 obj
<<
/Dest [ 7 0 R /XYZ 62.69291 558.0236 0 ] /Next 22 0 R /Parent 18 0 R /Prev 20 0 R /Title (Parallel GOL)
>>
endobj
22 0 obj
<<
/Dest [ 7 0 R /XYZ 62.69291 459.0236 0 ] /Next 23 0 R /Parent 18 0 R /Prev 21 0 R /Title (Requirements)
>>
endobj
23 0 obj
<<
/Dest [ 9 0 R /XYZ 62.69291 417.0236 0 ] /Next 24 0 R /Parent 18 0 R /Prev 22 0 R /Title (Compiling and running your applications)
>>
endobj
24 0 obj
<<
/Dest [ 9 0 R /XYZ 62.69291 324.0236 0 ] /Next 25 0 R /Parent 18 0 R /Prev 23 0 R /Title (Submitting)
>>
endobj
25 0 obj
<<
/Dest [ 14 0 R /XYZ 62.69291 687.0236 0 ] /Next 26 0 R /Parent 18 0 R /Prev 24 0 R /Title (Documentation)
>>
endobj
26 0 obj
<<
/Dest [ 14 0 R /XYZ 62.69291 612.0236 0 ] /Next 27 0 R /Parent 18 0 R /Prev 25 0 R /Title (Grading)
>>
endobj
27 0 obj
<<
/Dest [ 14 0 R /XYZ 62.69291 169.0236 0 ] /Parent 18 0 R /Prev 26 0 R /Title (TODO list)
>>
endobj
28 0 obj
<<
/Count 5 /Kids [ 6 0 R 7 0 R 9 0 R 14 0 R 15 0 R ] /Type /Pages
>>
endobj
29 0 obj
<<
/Length 8563
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 4 Tm /F2 20 Tf 24 TL 101.8949 0 Td (Conway's Game of Life in MPI) Tj T* -101.8949 0 Td ET
Q
Q
q
1 0 0 1 62.69291 708.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Introduction) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 654.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .077191 Tw (The Game of Life is a board game. The board consist of N x M cells \(N rows, M columns\), each having value 1 or 0,) Tj T* 0 Tw .034488 Tw (depending on whether or not it contains an "organism". Every cell on the board has eight neighbors. In our version of) Tj T* 0 Tw .319988 Tw (the game, the world has wrap-around both horizontally and vertically, so when moving off the left of the board, you) Tj T* 0 Tw (end up at the right; similarly top and bottom are connected.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 624.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .305542 Tw (Initially, some of the cells hold organisms. The cell values then change in synchronous global steps according to the) Tj T* 0 Tw (following simple rules:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 618.0236 cm
Q
q
1 0 0 1 62.69291 618.0236 cm
Q
q
1 0 0 1 62.69291 606.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Every organism with two or three neighboring organisms survives for the next generation.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 600.0236 cm
Q
q
1 0 0 1 62.69291 588.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Every organism with four or more neighbors dies from overpopulation.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 582.0236 cm
Q
q
1 0 0 1 62.69291 570.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Every organism with one or no neighbor dies from isolation.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 564.0236 cm
Q
q
1 0 0 1 62.69291 552.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Every empty cell adjacent to exactly three occupied neighbor cells will give birth to a new organism.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 552.0236 cm
Q
q
1 0 0 1 62.69291 534.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For more information, check out the "Game of Life" Wikipedia page and online applet:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 528.0236 cm
Q
q
1 0 0 1 62.69291 528.0236 cm
Q
q
1 0 0 1 62.69291 516.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 510.0236 cm
Q
q
1 0 0 1 62.69291 498.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (http://www.bitstorm.org/gameoflife/) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 498.0236 cm
Q
q
1 0 0 1 62.69291 456.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .681353 Tw (The parallel Game of Life is an example of what is called a parallel stencil operation and is very similar to a large) Tj T* 0 Tw -0.035013 Tw (number of simulation type parallel processing applications like simulating the movement of an oil spill in an ocean or) Tj T* 0 Tw (simulating the spread of a forest fire, or temperature distribution in conducting material.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 402.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL -0.065011 Tw (The goal of the assignment is to get familiarity of MPI by writing a parallel MPI program for the Game of Life, based) Tj T* 0 Tw .108488 Tw (on the sequential version. See file gol/gol-seq.c Your job is to write an MPI program that simulates the Game of Life) Tj T* 0 Tw .289488 Tw (on a varying number of compute nodes and CPU cores of DAS-5, that should be able to run significantly faster than) Tj T* 0 Tw (the sequential version.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 360.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .200898 Tw (In the MPI version, every process is responsible for a portion of the game board of size \(N x M\)/p. The total number) Tj T* 0 Tw .245988 Tw (of processes p is determined when submitting your job; it is the number of compute nodes times the number of CPU) Tj T* 0 Tw (cores per node.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 342.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The following \(positional\) arguments are provided to the application, e.g., "gol-par <) Tj (N) Tj (> <) Tj (M) Tj (> <) Tj (T) Tj (> <) Tj (W) Tj (> <) Tj (C) Tj (>) Tj (":) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 336.0236 cm
Q
q
1 0 0 1 62.69291 222.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 108 cm
Q
q
1 0 0 1 20 0 cm
q
1 1 1 rg
n 0 108 449.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 90 449.8898 -18 re f*
1 1 1 rg
n 0 72 449.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 54 449.8898 -18 re f*
1 1 1 rg
n 0 36 449.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 18 449.8898 -18 re f*
.960784 .960784 .862745 rg
n 0 108 449.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 93 cm
q
.960784 .960784 .862745 rg
n 0 0 32.98898 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.10949 0 Td (arg) Tj T* -10.10949 0 Td ET
Q
Q
q
1 0 0 1 50.98898 93 cm
q
.960784 .960784 .862745 rg
n 0 0 392.9008 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 179.2304 0 Td (meaning) Tj T* -179.2304 0 Td ET
Q
Q
0 0 0 rg
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (N) Tj T* ET
Q
Q
q
1 0 0 1 50.98898 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (number of rows of the world) Tj T* ET
Q
Q
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (M) Tj T* ET
Q
Q
q
1 0 0 1 50.98898 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (number of columns of the world) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (T) Tj T* ET
Q
Q
q
1 0 0 1 50.98898 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (number of timesteps to run the simulation) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (W) Tj T* ET
Q
Q
q
1 0 0 1 50.98898 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (every W timesteps, print global world state) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (C) Tj T* ET
Q
Q
q
1 0 0 1 50.98898 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (every C timesteps, print number of live cells) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 90 m 449.8898 90 l S
n 0 72 m 449.8898 72 l S
n 0 54 m 449.8898 54 l S
n 0 36 m 449.8898 36 l S
n 0 18 m 449.8898 18 l S
n 44.98898 0 m 44.98898 108 l S
n 0 108 m 449.8898 108 l S
n 0 0 m 449.8898 0 l S
n 0 0 m 0 108 l S
n 449.8898 0 m 449.8898 108 l S
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 222.0236 cm
Q
q
1 0 0 1 62.69291 180.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .108988 Tw (In the parallel implementation, at each W-th step, the process with MPI rank 0 should collect the world state from all) Tj T* 0 Tw .461894 Tw (processes and print the current configuration of the entire game board on standard output. If W is set to 0, no board) Tj T* 0 Tw (should be printed, so this can be used for performance experiments.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 138.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .169513 Tw (In the parallel implementation, at each C-th step, the process with MPI rank 0 should write the sum of the number of) Tj T* 0 Tw .033468 Tw (live cells at all processes on standard output. If C is set to 0, your program should only print the number of cells alive) Tj T* 0 Tw (at the end, as the sequential version does.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 120.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Your program should also calculate and print the runtime \(max. wall clock time over all processes\) on standard error.) Tj T* ET
Q
Q
 
endstream
endobj
30 0 obj
<<
/Length 6490
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (MPI) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 702.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .86686 Tw (This assignment for the parallel programming practical requires you to implement a parallel GOL \(Game Of Life\)) Tj T* 0 Tw .79561 Tw (algorithm, using C and the MPI \(Message Passing Interface\) communication library. The application has to be run) Tj T* 0 Tw (and benchmarked on the DAS-5 cluster at the VU.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 624.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL .206988 Tw (The Message-Passing Interface or MPI is widely used. It is not a new programming language; rather it is a library of) Tj T* 0 Tw 1.419986 Tw (subprograms that can be called from C and Fortran programs. It was developed by an open, international forum) Tj T* 0 Tw 3.53998 Tw (consisting of representatives from industry, academia, and government laboratories. It has rapidly received) Tj T* 0 Tw .313735 Tw (widespread acceptance because it has been carefully designed to permit maximum performance on a wide variety of) Tj T* 0 Tw .367209 Tw (systems, and it is based on message passing, one of the most powerful and widely used paradigms for programming) Tj T* 0 Tw (parallel systems.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 570.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.779398 Tw (The introduction of MPI also made it possible for developers of parallel software to write libraries for parallel) Tj T* 0 Tw 2.328876 Tw (programs that are both portable and efficient. Use of these libraries will hide many of the details of parallel) Tj T* 0 Tw -0.076016 Tw (programming, and, as a consequence, make parallel computing much more accessible to students and professionals in) Tj T* 0 Tw (all branches of science and engineering.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 537.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Parallel GOL) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 471.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL -0.053902 Tw (In the parallel implementation of GOL, the "world" of cells should be partitioned over the processes. Every process is) Tj T* 0 Tw 1.109036 Tw (responsible of computing the next timesteps of its part of the world. The values of the cells at the boarder of the) Tj T* 0 Tw 2.443318 Tw (domains should be exchanged with the appropriate processes before each new timestep, so that your parallel) Tj T* 0 Tw 3.502485 Tw (implementation gives the same results as the sequential one. As mentioned, also note that the world has) Tj T* 0 Tw ("wrap-around", i.e., it could be seen as the surface of a torus-like shape, represented by a 2D array.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 438.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Requirements) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 384.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 4.302126 Tw (Implement a parallel Game Of Life \(GOL\) algorithm using MPI, starting from the provided sequential) Tj T* 0 Tw .375697 Tw (implementation, which is available on Canvas. The reference sequential program contains the 'stencil' operation that) Tj T* 0 Tw 2.006457 Tw (implements the GOL liveness rule, that should repeatedly be applied to each grid point. The algorithm uses a) Tj T* 0 Tw (predetermined number of timesteps, which is given as parameter.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 354.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.114512 Tw (Data distribution at the start, counting the global sum of live cells, and gathering the data for printing the global world) Tj T* 0 Tw (state must also be implemented in your program.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 312.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.745868 Tw (The base parallel version of GOL must partition the world grid such that each process gets approximately N/P) Tj T* 0 Tw .079986 Tw (consecutive rows. The application should in principle run on any number of machines, and accept any given problem) Tj T* 0 Tw (size \(assuming sufficient memory is available\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 246.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL .962619 Tw (Limit your code changes to the essentials. Much of the existing sequential code can and should be reused in your) Tj T* 0 Tw 1.50686 Tw (parallel implementation. This mimics a real life situation where a large existing sequential application has to be) Tj T* 0 Tw .181654 Tw (parallelized. You do not want to spend much time to completely redesign the entire application, but you typically try) Tj T* 0 Tw .45528 Tw (to get reasonable speedups mostly reusing the existing code base. The provided sequential code for GOL is suitable) Tj T* 0 Tw (for this.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 180.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL -0.056012 Tw (Make sure you use the right MPI operations for the best performance. E.g., if you need to communicate a sequence of) Tj T* 0 Tw .591807 Tw (grid points, do this by means of a single transfer, instead of a sequence of tiny transfers. When it is efficient to use) Tj T* 0 Tw .047633 Tw (collective operations, do so. You can use the MPI_Wtime\(\) function provided by MPI to measure the performance of) Tj T* 0 Tw 1.576905 Tw (computation/communication sections of your code; this may be helpful to analyze the communication overhead,) Tj T* 0 Tw (which can impact parallel performance.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 150.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .812651 Tw (When doing performance measurements you should not take the time required for data distribution, data gathering) Tj T* 0 Tw (and printing into account \(i.e., specify 0 for the "V" argument while doing these experiments\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 108.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.083626 Tw (Measure the speedups of the GOL version on DAS-5, but using only up to 8 nodes and up to 16 cores per node.) Tj T* 0 Tw .859988 Tw (NOTE: DAS-5/VU itself has over 64 nodes, but this system is primarily used for research projects, so we want to) Tj T* 0 Tw (leave enough resources to remain available for that purpose, hence the limitation to 8 compute nodes.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 90.02362 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To limit the number of experiments and hence load of DAS-5, follow these guidelines:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 84.02362 cm
Q
q
1 0 0 1 62.69291 84.02362 cm
Q
 
endstream
endobj
31 0 obj
<<
/Length 8447
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 729.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.012791 Tw (select two representative world sizes: a small sized one \(but large enough that every process has some data\) and) Tj T* 0 Tw 1.192927 Tw (a much bigger one, adapting the number of timesteps so that the sequential version completes within a few) Tj T* 0 Tw (minutes;) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 723.0236 cm
Q
q
1 0 0 1 62.69291 675.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 38 Tm .416988 Tw 12 TL /F1 10 Tf 0 0 0 rg (check performance only on a subset of all possible node/core combinations, e.g., on 1, 2, 4, 8 nodes with 1, 4,) Tj T* 0 Tw .442209 Tw (16 cores, so in total scaling from 1x1 up to 8x16=128 cores. Spawn multiple processes per DAS-5 node using) Tj T* 0 Tw -0.020539 Tw (the available prun option. E.g., "prun -np 2 -8 gol-par <) Tj (N) Tj (> <) Tj (M) Tj (> <) Tj (T) Tj (> <) Tj (W) Tj (> <) Tj (C) Tj (>) Tj (". allocates 2 nodes and spawns) Tj T* 0 Tw (8 processes per node, so in this case 16 CPU cores in total are used.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 669.0236 cm
Q
q
1 0 0 1 62.69291 645.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.333555 Tw (Draw separate speedup lines per core setting, and discuss performance patterns. Does speedup change with) Tj T* 0 Tw (increasing problem size, and why?) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 645.0236 cm
Q
q
1 0 0 1 62.69291 591.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL -0.117907 Tw (Part of the message transfers via MPI happen inside a node \(using shared memory\), but between compute nodes a fast) Tj T* 0 Tw 2.307356 Tw (interconnect network \(InfiniBand\) is used. This is all hidden by the MPI API and taken care of by the MPI) Tj T* 0 Tw 2.498443 Tw (implementation, but depending on the application, you may see performance differences depending on where) Tj T* 0 Tw (communication takes place.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 561.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.086988 Tw (Don't wait with your experiments until the last week of the assignment, or you might have to wait long for other) Tj T* 0 Tw (users' jobs to complete first.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 519.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.201318 Tw (Write a short report in English describing your design, implementation, and performance results for your parallel) Tj T* 0 Tw .551984 Tw (GOL solution. Describe \(briefly\) the way the algorithm works, focusing on the MPI implementation details. Before) Tj T* 0 Tw (presenting the performance results, mention the composition of the experimental set-up:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 513.0236 cm
Q
q
1 0 0 1 62.69291 513.0236 cm
Q
q
1 0 0 1 62.69291 501.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (number of nodes and CPU cores, input parameters, application versions, etc.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 495.0236 cm
Q
q
1 0 0 1 62.69291 483.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the way you measured the execution time) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 483.0236 cm
Q
q
1 0 0 1 62.69291 429.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.272927 Tw (Include performance graphs of your application. Report speedups in the form of graphs with the total number of) Tj T* 0 Tw 1.825251 Tw (processes \(the number of nodes times number of cores per node\) on the x-axis to provide quick insight in the) Tj T* 0 Tw .663984 Tw (performance of your implementation. Highlight a number of important performance aspects and key insights in the) Tj T* 0 Tw (text.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 396.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Compiling and running your applications) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 354.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .308735 Tw (Refer to the DAS-5 documentation to execute your program using prun. For MPI, use the OpenMPI implementation) Tj T* 0 Tw .389985 Tw (on DAS-5, which becomes available in your environment by mean of "module load openmpi/gcc/64". You can start) Tj T* 0 Tw (with the simple MPI example provided here:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 348.0236 cm
Q
q
1 0 0 1 62.69291 348.0236 cm
Q
q
1 0 0 1 62.69291 336.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://www.cs.vu.nl/das5/jobs.shtml) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 336.0236 cm
Q
q
1 0 0 1 62.69291 303.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Submitting) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 285.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You have to submit both the code and a report.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 255.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .88061 Tw (Important: Because we partly use automatic test scripts to test and benchmark your submissions, you must strictly) Tj T* 0 Tw (follow the instructions below.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 249.0236 cm
Q
q
1 0 0 1 62.69291 249.0236 cm
Q
q
1 0 0 1 62.69291 237.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Make sure that your submission has the exact same directory structure as the provided template.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 231.0236 cm
Q
q
1 0 0 1 62.69291 195.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .071235 Tw (The parallel program should be compiled in the same directory as the sequential program. Change the Makefile) Tj T* 0 Tw 1.469985 Tw (to make sure that your parallel GOL version is compiled with the "make gol-par" command. The standard) Tj T* 0 Tw (parallel executable must be called "gol-par".) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 189.0236 cm
Q
q
1 0 0 1 62.69291 165.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .77332 Tw (If you have additional executables as part of the bonus work, include an additional target in the Makefile for) Tj T* 0 Tw (this.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 159.0236 cm
Q
q
1 0 0 1 62.69291 111.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL 1.703735 Tw (Make sure that your parallel program gives the exact same output as the sequential program. Because we) Tj T* 0 Tw .010574 Tw (compare your application's output with the correct output using diff, any difference \(except for the run time and) Tj T* 0 Tw -0.061124 Tw (other diagnostics you print on standard error\) could lead to a rejection of your submission. A sanity check script) Tj T* 0 Tw (is available in the archive on Canvas to check this.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 105.0236 cm
Q
q
1 0 0 1 62.69291 93.02362 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Create the report as a PDF file, and make sure you place the file in the pre-created docs directory.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 87.02362 cm
Q
 
endstream
endobj
32 0 obj
<<
/Length 9147
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 729.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL -0.045013 Tw (Place the code and documentation directories in a directory that contains your VUnet id, full name, and the type) Tj T* 0 Tw 4.405697 Tw (of assignment \(i.e., mpi\) - e.g., jj400_JanJanssen_mpi. Archive the directory as a .tar.gz file \(i.e.) Tj T* 0 Tw (jj400_JanJanssen_mpi.tar.gz\) and submit this archive via Canvas.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 729.0236 cm
Q
q
1 0 0 1 62.69291 699.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.253516 Tw (Note that passing the sanity check does not guarantee a passing grade, but guarantees the assignment can be) Tj T* 0 Tw (considered ready for grading.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 666.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Documentation) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 654.0236 cm
Q
q
1 0 0 1 62.69291 654.0236 cm
Q
q
1 0 0 1 62.69291 642.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (C Reference manual and other documentation) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 636.0236 cm
Q
q
1 0 0 1 62.69291 624.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The official MPI documentation ) Tj 0 0 .501961 rg (http://www.mpi.org) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 624.0236 cm
Q
q
1 0 0 1 62.69291 591.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Grading) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 561.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .886651 Tw (A correct implementation, compliant with all the requirements above \(both for code and documentation\) is graded) Tj T* 0 Tw (with 8.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 543.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Up to 2 bonus points \(to grade 10\) can be given for extra work on the following aspects:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 537.0236 cm
Q
q
1 0 0 1 62.69291 537.0236 cm
Q
q
1 0 0 1 62.69291 459.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 63 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT 1 0 0 1 0 50 Tm /F1 10 Tf 12 TL 2.479318 Tw (implement GOL also using a different data distribution by splitting up the grid column-wise instead of) Tj T* 0 Tw 1.134983 Tw (row-wise, and comparing the achieved performance. Discuss for which grid sizes you expect the alternative) Tj T* 0 Tw .179269 Tw (data distribution may give better performance, and evaluate this in practice. Note that column-wise distribution) Tj T* 0 Tw .572485 Tw (and communication may be a bit more challenging given the way memory for multidimensional arrays is laid) Tj T* 0 Tw (out in C. See) Tj T* ET
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://www.rookiehpc.com/mpi/docs/mpi_type_create_resized.php) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 453.0236 cm
Q
q
1 0 0 1 62.69291 381.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 1.574147 Tw (make a more detailed evaluation of communication overheads using MPI_Wtime\(\) around MPI primitives,) Tj T* 0 Tw 1.98284 Tw (comparing non-blocking and blocking MPI primitives. Do you expect much impact in this case? Discuss) Tj T* 0 Tw (results, taking Amdahls and Gustavson's laws into account:) Tj T* ET
Q
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 15 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://en.wikipedia.org/wiki/Amdahl%27s_law) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (https://en.wikipedia.org/wiki/Gustafson%27s_law) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 375.0236 cm
Q
q
1 0 0 1 62.69291 351.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.972619 Tw (If you want to work on some other extensions for the bonus points, clearly tell why you thought it was) Tj T* 0 Tw (interesting, and what insights it provides compared to the basic parallel version.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 351.0236 cm
Q
q
1 0 0 1 62.69291 335.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (Important:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 296.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 26 Tm  T* ET
q
1 0 0 1 20 0 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .565898 Tw (You only get bonus points for extra work if is done clearly in addition of the base version, so put code for the) Tj T* 0 Tw .413735 Tw (bonus version in a separate implementation or use #ifdef BONUS_XYZ to add functionality to the base source) Tj T* 0 Tw (code. Put a discussion related to the bonus work in a separate section of your report.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 280.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL (The points are distributed as follows:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 181.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 86 Tm  T* ET
q
1 0 0 1 20 90 cm
Q
q
1 0 0 1 20 0 cm
q
1 1 1 rg
n 0 90 449.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 72 449.8898 -18 re f*
1 1 1 rg
n 0 54 449.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 36 449.8898 -18 re f*
1 1 1 rg
n 0 18 449.8898 -18 re f*
.960784 .960784 .862745 rg
n 0 90 449.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 75 cm
q
.960784 .960784 .862745 rg
n 0 0 28.89907 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 2.224535 0 Td (points) Tj T* -2.224535 0 Td ET
Q
Q
q
1 0 0 1 46.89907 75 cm
q
.960784 .960784 .862745 rg
n 0 0 396.9907 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 166.6903 0 Td (assignment task) Tj T* -166.6903 0 Td ET
Q
Q
0 0 0 rg
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
q
1 0 0 1 46.89907 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (correct base parallel implementation, compliant with all the requirements) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 0 0 1 46.89907 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (coding style \(use clear code with concise comments\)) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
q
1 0 0 1 46.89907 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (report with discussion of your implementation and evaluation) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
q
1 0 0 1 46.89907 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (bonus for extra work) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 72 m 449.8898 72 l S
n 0 54 m 449.8898 54 l S
n 0 36 m 449.8898 36 l S
n 0 18 m 449.8898 18 l S
n 40.89907 0 m 40.89907 90 l S
n 0 90 m 449.8898 90 l S
n 0 0 m 449.8898 0 l S
n 0 0 m 0 90 l S
n 449.8898 0 m 449.8898 90 l S
Q
Q
Q
q
1 0 0 1 20 0 cm
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 148.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (TODO list) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 130.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (We recommend following these steps:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 124.0236 cm
Q
q
1 0 0 1 62.69291 124.0236 cm
Q
q
1 0 0 1 62.69291 112.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Look at the sequential version of the GOL application.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 106.0236 cm
Q
q
1 0 0 1 62.69291 82.02362 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.841235 Tw (Recheck the MPI introduction presented in the earlier course in class, and/or look through the extra MPI) Tj T* 0 Tw (introductory material on Canvas.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 76.86614 cm
Q
 
endstream
endobj
33 0 obj
<<
/Length 5007
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 753.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Create a parallel application using MPI and C.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 747.0236 cm
Q
q
1 0 0 1 62.69291 723.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .243318 Tw (Make sure your application runs correctly for various input parameters, also ones where the world row/column) Tj T* 0 Tw (size does not exactly divide the number of processes used.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 717.0236 cm
Q
q
1 0 0 1 62.69291 645.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 62 Tm /F1 10 Tf 12 TL 1.437984 Tw (Test the functionality and correctness of your application on DAS-5. With the sample fixed "glider" world) Tj T* 0 Tw 1.732339 Tw (provided, you can visually check whether the output looks OK, but it should of course work on arbitrary) Tj T* 0 Tw .122485 Tw (worlds, and for that random patterns are more suitable. Test that your parallel implementation gives exactly the) Tj T* 0 Tw .801163 Tw (same output as the sequential version. Either do this with the provided sanity-check script \(which runs a few) Tj T* 0 Tw 1.252126 Tw (standard random worlds and compares them against pre-recorded sequential outputs\) or make some tests of) Tj T* 0 Tw (your own.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 639.0236 cm
Q
q
1 0 0 1 62.69291 591.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .464651 Tw (Note that the random world generated depends on a particular random number implementation, which may be) Tj T* 0 Tw 1.569398 Tw (different depending on the platform used. If you test this on a Windows/MacOS laptop, or use a different) Tj T* 0 Tw .464431 Tw (version of Linux, it may generate a different world and therefore give different results. So test this on DAS-5,) Tj T* 0 Tw (which you should use anyway for your evaluation.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 585.0236 cm
Q
q
1 0 0 1 62.69291 561.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .244985 Tw (Benchmark the sequential and parallel application for selected input parameters, using both a small and a large) Tj T* 0 Tw (world size.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 555.0236 cm
Q
q
1 0 0 1 62.69291 519.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 3.135697 Tw (Write a report about your MPI assignment. Present the experimental results and discuss the achieved) Tj T* 0 Tw .47229 Tw (performance of your solution, referring to speedups graphs included. Mention the difficulties you encountered) Tj T* 0 Tw (\(if any\) and how you solved them.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 513.0236 cm
Q
q
1 0 0 1 62.69291 489.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL -0.000569 Tw (\(Optional\) To get up to 2 bonus points for this assignment, check the Grading section above and implement one) Tj T* 0 Tw (or two of the extensions described there.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 483.0236 cm
Q
q
1 0 0 1 62.69291 459.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.192209 Tw (Check that the code and report are placed in the correct directories, make sure the Makefile is also correct,) Tj T* 0 Tw (archive the entire directory, and submit the archive via Canvas.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 453.0236 cm
Q
q
1 0 0 1 62.69291 429.0236 cm
q
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .694987 Tw (If needed, you can update and resubmit the code and/or report on Canvas. Only the last submission found on) Tj T* 0 Tw (Canvas at the submission deadline will be checked and graded.) Tj T* ET
Q
Q
q
Q
Q
Q
q
1 0 0 1 62.69291 429.0236 cm
Q
 
endstream
endobj
34 0 obj
<<
/Nums [ 0 35 0 R 1 36 0 R 2 37 0 R 3 38 0 R 4 39 0 R ]
>>
endobj
35 0 obj
<<
/S /D /St 1
>>
endobj
36 0 obj
<<
/S /D /St 2
>>
endobj
37 0 obj
<<
/S /D /St 3
>>
endobj
38 0 obj
<<
/S /D /St 4
>>
endobj
39 0 obj
<<
/S /D /St 5
>>
endobj
xref
0 40
0000000000 65535 f 
0000000073 00000 n 
0000000114 00000 n 
0000000223 00000 n 
0000000331 00000 n 
0000000535 00000 n 
0000000722 00000 n 
0000000951 00000 n 
0000001156 00000 n 
0000001344 00000 n 
0000001567 00000 n 
0000001738 00000 n 
0000001953 00000 n 
0000002150 00000 n 
0000002350 00000 n 
0000002596 00000 n 
0000002802 00000 n 
0000002908 00000 n 
0000003194 00000 n 
0000003268 00000 n 
0000003381 00000 n 
0000003498 00000 n 
0000003624 00000 n 
0000003750 00000 n 
0000003903 00000 n 
0000004027 00000 n 
0000004155 00000 n 
0000004277 00000 n 
0000004388 00000 n 
0000004474 00000 n 
0000013089 00000 n 
0000019631 00000 n 
0000028130 00000 n 
0000037329 00000 n 
0000042388 00000 n 
0000042465 00000 n 
0000042499 00000 n 
0000042533 00000 n 
0000042567 00000 n 
0000042601 00000 n 
trailer
<<
/ID 
[<c1422d5d9f1d9548de4a6fe1df0659b1><c1422d5d9f1d9548de4a6fe1df0659b1>]
% ReportLab generated PDF document -- digest (http://www.reportlab.com)

/Info 17 0 R
/Root 16 0 R
/Size 40
>>
startxref
42635
%%EOF
